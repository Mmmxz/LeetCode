// 405. 数字转换为十六进制数
// 给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 补码运算 方法。

// 注意:

// 十六进制中所有字母(a-f)都必须是小写。
// 十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符'0'来表示；对于其他情况，十六进制字符串中的第一个字符将不会是0字符。 
// 给定的数确保在32位有符号整数范围内。
// 不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。
// 示例 1：

// 输入:
// 26

// 输出:
// "1a"
// 示例 2：

// 输入:
// -1

// 输出:
// "ffffffff"

/**
 * @param {number} num
 * @return {string}
 */
const CONV = '0123456789abcdef'
var toHex = function(num) {
  if (num === 0) return '0'
  if (num < 0) num += 2 ** 32
  // 补码：二进制位取反+1
  // 26=1*16^1+10*16^0
  // 辗转相除法
  let ans = []
  while (num) {
    let cur = num % 16 // cur∈[0,15]
    ans.push(CONV[cur])
    num = Math.floor(num / 16)
  }
  return ans.reverse().join('')
};
