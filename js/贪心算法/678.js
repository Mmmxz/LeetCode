// 678. 有效的括号字符串
// 给定一个只包含三种字符的字符串：（ ，） 和 *，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：

// 任何左括号 ( 必须有相应的右括号 )。
// 任何右括号 ) 必须有相应的左括号 ( 。
// 左括号 ( 必须在对应的右括号之前 )。
// * 可以被视为单个右括号 ) ，或单个左括号 ( ，或一个空字符串。
// 一个空字符串也被视为有效字符串。
// 示例 1:

// 输入: "()"
// 输出: True
// 示例 2:

// 输入: "(*)"
// 输出: True
// 示例 3:

// 输入: "(*))"
// 输出: True
// 注意:

// 字符串大小将在 [1，100] 范围内。

/**
 * @param {string} s
 * @return {boolean}
 */
var checkValidString = function(s) {
  // 贪心
  // 左括号最少/最多可能有多少个
  let min = 0, max = 0
  for (const char of s) {
    // 遇到'('所有可能性加一
    // 遇到')'所有可能性减一
    // 遇到'*'，最少的可能性可以变少，最多的可能性也同样可以变多
    if (char === '(') {
      min++
      max++
    } else if (char === ')') {
      min--
      max--
    } else {
      min--
      max++
    }
    // 当前左括号最少个数不能为负
    min = Math.max(min, 0)
    // 这种情况其实发生在r本身是负数的时候，也就是我们常见的右括号太多了
    if (min > max) return false
  }
  // 能取到0个左括号才是满足平衡的
  return min === 0
};
