// 36. 有效的数独
// 请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
// 数独部分空格内已填入了数字，空白格用 '.' 表示。

// 注意：

// 一个有效的数独（部分已被填充）不一定是可解的。
// 只需要根据以上规则，验证已经填入的数字是否有效即可。
 

// 示例 1：


// 输入：board = 
// [["5","3",".",".","7",".",".",".","."]
// ,["6",".",".","1","9","5",".",".","."]
// ,[".","9","8",".",".",".",".","6","."]
// ,["8",".",".",".","6",".",".",".","3"]
// ,["4",".",".","8",".","3",".",".","1"]
// ,["7",".",".",".","2",".",".",".","6"]
// ,[".","6",".",".",".",".","2","8","."]
// ,[".",".",".","4","1","9",".",".","5"]
// ,[".",".",".",".","8",".",".","7","9"]]
// 输出：true
// 示例 2：

// 输入：board = 
// [["8","3",".",".","7",".",".",".","."]
// ,["6",".",".","1","9","5",".",".","."]
// ,[".","9","8",".",".",".",".","6","."]
// ,["8",".",".",".","6",".",".",".","3"]
// ,["4",".",".","8",".","3",".",".","1"]
// ,["7",".",".",".","2",".",".",".","6"]
// ,[".","6",".",".",".",".","2","8","."]
// ,[".",".",".","4","1","9",".",".","5"]
// ,[".",".",".",".","8",".",".","7","9"]]
// 输出：false
// 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 

// 提示：

// board.length == 9
// board[i].length == 9
// board[i][j] 是一位数字或者 '.'

/**
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function(board) {
  // 按行判断 按列判断 按格子判断
  for (let i = 0; i < 9; i++) {
    let row = new Set(), col = new Set()
    for (let j = 0; j < 9; j++) {
      // ij 访问行元素 ji访问列元素
      if (board[i][j] !== '.') {
        if (row.has(board[i][j])) {
          return false
        } else {
          row.add(board[i][j])
        }
      }
      if (board[j][i] !== '.') {
        if (col.has(board[j][i])) {
          return false
        } else {
          col.add(board[j][i])
        }
      }
    }
  }
  // 3*3
  // 00 01 02  03 04 05  06 07 08
  // 10 11 12  13 14 15  16 17 18
  // 20 21 22  23 24 25

  // 30 31 32
  for (let i = 0; i <= 2; i++) {
    let w = i * 3
    for (let j = 0; j <= 2; j++) {
      let s = j * 3
      // ws 是每个格子的开头位置
      let box = new Set()
      for (let m = w; m < w + 3; m++) {
        for (let n = s; n < s + 3; n++) {
          if (board[m][n] !== '.') {
            if (box.has(board[m][n])) {
              return false
            } else {
              box.add(board[m][n])
            }
          }
        }
      }
    }
  }
  return true
};
