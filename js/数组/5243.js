// // 5243. 同积元组

// // 给你一个由 不同 正整数组成的数组 nums ，请你返回满足 a * b = c * d 的元组 (a, b, c, d) 的数量。其中 a、b、c 和 d 都是 nums 中的元素，且 a != b != c != d 。
// 示例 1：

// 输入：nums = [2,3,4,6]
// 输出：8
// 解释：存在 8 个满足题意的元组：
// (2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)
// (3,4,2,6) , (3,4,2,6) , (3,4,6,2) , (4,3,6,2)
// 示例 2：

// 输入：nums = [1,2,4,5,10]
// 输出：16
// 解释：存在 16 个满足题意的元组：
// (1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)
// (2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)
// (2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,4,5)
// (4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)
// 示例 3：

// 输入：nums = [2,3,4,6,8,12]
// 输出：40
// 示例 4：

// 输入：nums = [2,3,5,7]
// 输出：0
 

// 提示：

// 1 <= nums.length <= 1000
// 1 <= nums[i] <= 104
// nums 中的所有元素 互不相同

/**
 * @param {number[]} nums
 * @return {number}
 */
// 思路：将每两个数的乘积存放在 map 中记录次数，次数大于 1 次代表有乘积相同的分组数，然后根据 n * (n - 1) / 2 计算每组有多少种组合，已知每种组合有 8 种元组，可得出结果。
// e.g. 有 3 组的乘积相同，则有 3 * (3 - 1) / 2 = 3 种组合，即 3 * 8 = 24 种元组
// e.g. 有 4 组的乘积相同，则有 4 * (4 - 1) / 2 = 6 种组合，即 6 * 8 = 48 种元组
var tupleSameProduct = function(nums) {
  let m1 = new Map()
  // 1.双重循环，将所有乘积情况存入 map
  for (let i = 0; i < nums.length; i++) {
    for (let j = i + 1; j < nums.length; j++) {
      const mul = nums[i] * nums[j]
      if (m1.has(mul)) {
        m1.set(mul, m1.get(mul) + 1)
      } else {
        m1.set(mul, 1)
      }
    }
  }
  // 2.将乘积 >1 的情况筛选出来，根据 从 n 个中取 2 个有多少种情况的公式，计算出每种情况的数量
  let list = [...m1.values()].filter(item => item > 1).map(item => item * (item - 1) / 2)
  // 3.将不同乘积情况的组合 * 8 代表这个乘积可以生成的元组数，求和可得结果
  let res = list.reduce((acc, cur) => acc + cur * 8, 0)
  return res
};