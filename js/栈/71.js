// 71. 简化路径
// 以 Unix 风格给出一个文件的绝对路径，你需要简化它。或者换句话说，将其转换为规范路径。

// 在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。更多信息请参阅：Linux / Unix中的绝对路径 vs 相对路径

// 请注意，返回的规范路径必须始终以斜杠 / 开头，并且两个目录名之间必须只有一个斜杠 /。最后一个目录名（如果存在）不能以 / 结尾。此外，规范路径必须是表示绝对路径的最短字符串。

 

// 示例 1：

// 输入："/home/"
// 输出："/home"
// 解释：注意，最后一个目录名后面没有斜杠。
// 示例 2：

// 输入："/../"
// 输出："/"
// 解释：从根目录向上一级是不可行的，因为根是你可以到达的最高级。
// 示例 3：

// 输入："/home//foo/"
// 输出："/home/foo"
// 解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。
// 示例 4：

// 输入："/a/./b/../../c/"
// 输出："/c"
// 示例 5：

// 输入："/a/../../b/../c//.//"
// 输出："/c"
// 示例 6：

// 输入："/a//b////c/d//././/.."
// 输出："/a/b/c"

/**
 * @param {string} path
 * @return {string}
 */
var simplifyPath = function(path) {
  // 1.用栈存储有效的路径
  let stack = []
  for (let char of path.split('/')) {
    // 2.遇到 '' 和 '.' 代表当前路径 不做处理
    if (char === '' || char === '.') {
      continue
    // 3.遇到 '..' 代表上一级路径 做出栈操作
    } else if (char === '..') {
      stack.pop()
    // 4.遇到正常字符串代表目录 将其入栈
    } else {
      stack.push(char)
    }
  }
  // 5.在路径前拼接 '/'
  return '/' + stack.join('/')
};

// 思路
// 将path以'/'分割成数组，如 /a/./b/../../c/分割成[ '', 'a', '.', 'b', '..', '..', 'c', '' ]。 新建一个栈stack为当前的路径，遍历path分割后的数组元素:

// 遇到正常的字母时，推入 stack 中
// 遇到 .. 时，stack 弹出最近一个路径
// 遇到 . 或者为空时，不修改当前 stack。
// 最后返回 '/' + stack.join('/') 为新的路径